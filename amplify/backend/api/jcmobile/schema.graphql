type Mutation {
  batchCreateDirectMessageUsers(dmusers: [batchCreateDirectMessageUsersInput]): [DirectMessageUser]
  createPaymentIntent(msg: String): StripePaymentIntent @function(name: "jcmobileStripeCreatePaymentIntent-${env}")
  createCustomer(idempotency:String,phone:String,email:String,firstName:String,lastName:String,billingAddress:StripeAddressInput): StripeCustomerData @function(name: "jcmobileStripCreateCustomer-${env}")
  createSubscription(stripeCustomerID:String,stripeSubscriptionID:String,idempotency:String,paymentMethodId: String,priceInfo: StripePriceInput): StripeSubscriptionData @function(name: "jcmobileStripCreateSubscription-${env}")
  previewInvoice(stripeCustomerID:String,idempotency:String,priceInfo: StripePriceInput): StripeInvoiceData @function(name: "jcmobileStripPreviewInvoice-${env}")
} 
input StripeAddressInput
{
    city:String
    country:String
    line1:String
    line2:String
    postal_code:String
    state:String
  }
input StripePriceInput{
  prices:[StripePriceDetail]
}
input StripePriceDetail{
  price:String
  quantity:Int
}
type StripeSubscriptionData{
  subscription:StripeSubscription
}
type StripeInvoiceData{
  invoice:StripeInvoice
}
type StripeCustomerData{
  customer:StripeCustomer
}
type StripeSubscription{
  id:String
  object:String
  application_fee_percent:String
  billing_cycle_anchor:String
  billing_thresholds:String
  cancel_at:String
  cancel_at_period_end:String
  canceled_at:String
  collection_method:String
  created:String
  current_period_end:String
  current_period_start:String
  customer:String
  days_until_due:String
  default_payment_method:String
  default_source:String
  default_tax_rates:[String]
  discount:String
  ended_at:String
  items:StripeSubscriptionItems 
  latest_invoice:StripeInvoice
  livemode:String
  metadata:String
  next_pending_invoice_item_invoice:String
  pause_collection:String
  pending_invoice_item_interval:String
  pending_setup_intent:String
  pending_update:String
  schedule:String
  start_date:String
  status:String
  transfer_data:String
  trial_end:String
  trial_start:String

}
type StripeSubscriptionItems
{
    object:String
    data:[StripeSubscriptionItemData]
    has_more:String
    url:String
}

type StripeSubscriptionItemData{

      
        id: String
        object: String
        billing_thresholds: String
        created: String
        metadata: String
        price:StripePrice 
        quantity: String
        subscription: String
        tax_rates: String
      
}
type StripePrice{
  
          id: String
          object: String
          active: String
          billing_scheme: String
          created: String
          currency: String
          livemode: String
          lookup_key: String
          metadata: String
          nickname: String
          product: String
          recurring:StripeRecurring
          tiers_mode: String
          transform_quantity: String
          type: String
          unit_amount: String
          unit_amount_decimal: String
        
}
type StripeRecurring{
  
            aggregate_usage:String
            interval:String
            interval_count:String
            usage_type:String
          
}
type StripeCustomer{
  
  id: String
  object:String
  address:String
  balance:String
  created:String
  currency:String
  default_source:String
  delinquent:String
  description:String
  discount:String
  email:String
  invoice_prefix:String
  invoice_settings: StripeInvoiceSettings
  livemode:String
  metadata:String
  name:String
  next_invoice_sequence:String
  phone:String
  preferred_locales:String
  shipping:String
  tax_exempt:String

}
type StripeAddress{
 
    city:String
    country:String
    line1:String
    line2:String
    postal_code:String
    state:String
  
}
type StripeInvoiceSettings{
      custom_fields:String
    default_payment_method:String
    footer:String

}
type StripePeriod{
  end:String
          start:String
}
type StripeLineData{
  
        id:String
        object:String
        amount:String
        currency:String
        description:String
        discount_amounts:[String]
        discountable:String
        discounts:[String]
        livemode:String
        metadata:String
        period:StripePeriod
        price: StripePrice
        proration:String
        quantity:String
        subscription:String
        subscription_item:String
        tax_amounts:[String]
        tax_rates:[String]
        type:String
    
    
}
type StripeLines{
    data: [StripeLineData]
    has_more:String
    object:String
    url:String
}
type StripeInvoice{
  
  id:String
  object:String
  account_country:String
  account_name:String
  account_tax_ids:String
  amount_due:String
  amount_paid:String
  amount_remaining:String
  application_fee_amount:String
  attempt_count:String
  attempted:String
  auto_advance:String
  billing_reason:String
  charge:String
  collection_method:String
  created:String
  currency:String
  custom_fields:String
  customer:String
  customer_address:StripeAddress
  customer_email:String
  customer_name:String
  customer_phone:String
  customer_shipping:String
  customer_tax_exempt:String
  customer_tax_ids:[String]
  default_payment_method:String
  default_source:String
  default_tax_rates:[String]
  description:String
  discount:String
  discounts:[String]
  due_date:String
  ending_balance:String
  footer:String
  hosted_invoice_url:String
  invoice_pdf:String
  last_finalization_error:String
  lines:StripeLines
  livemode:String
  metadata:String
  next_payment_attempt:String
  number:String
  paid:String
  payment_intent:String
  period_end:String
  period_start:String
  post_payment_credit_notes_amount:String
  pre_payment_credit_notes_amount:String
  receipt_number:String
  starting_balance:String
  statement_descriptor:String
  status:String
  status_transitions:StripeTransition
  subscription:String
  subtotal:String
  tax:String
  total:String
  total_discount_amounts:[String]
  total_tax_amounts:[String]
  transfer_data:String
  webhooks_delivered_at:String
}
type StripeTransition{
    finalized_at:String
    marked_uncollectible_at:String
    paid_at:String
    voided_at:String
  
}
type StripeCharges{
  
    object:String
    data:[String]
    has_more:String
    total_count:String
    url:String
  
}
type StripeCard{
      installments:String
      network:String
      request_three_d_secure:String
}
type StripePaymentOptions{
 card:StripeCard
}
type StripePaymentIntent{
  id:String
  client_secret:String
  status:String

}

input batchCreateDirectMessageUsersInput {
  userId: ID!
  userName: String!
  roomId: ID!
}

type ApplicationProcess
@model
{
  id:ID!
}
type Address{
  city:String
    country:String
    line1:String
    line2:String
    postal_code:String
    state:String
}
enum PaidState{
  Unknown
  InProgress
  NeedsPayment
  Success
}
type User
  @searchable
  @model
  @auth(
    rules: [
      { allow: private, provider:iam, operations:[read]}
      { allow: private, provider:userPools, operations:[read]}
      { allow: owner, ownerField: "owner" }
      { allow: groups, groups: ["admin"] } 
      { allow: groups, groups: ["verifiedUsers"], operations: [read] }
    ]
  ) {
  
  id: ID!
  given_name: String!
  family_name: String!
  email: String @auth(rules: [{ allow: owner, ownerField: "owner" },{allow:groups,groups:["admin"],operations:[read]}])
  phone: String @auth(rules: [{ allow: owner, ownerField: "owner" }])
  owner: String
  mainUserGroup:String 

  stripeCustomerID:String @auth(rules: [{ allow: owner, ownerField: "owner" ,operations:[read]},{allow:groups,groups:["admin"]}])
  stripeSubscriptionID:String @auth(rules: [{ allow: owner, ownerField: "owner" ,operations:[read]},{allow:groups,groups:["admin"]}])

  hasPaidState: PaidState
  profileState: String
  billingAddress: Address @auth(rules: [{ allow: owner, ownerField: "owner" }])

  location: LatLong
  profileImage: Image
  aboutMeShort: String
  aboutMeLong: String
  interests: [String]
  currentRole: String
  currentScope: String
  personality: String
  orgName: String
  orgType: String
  orgSize: String
  denomination: String
  pplServed: String
  sundayAttendance: String
  numberVolunteers: String
  orgDescription: String
  joined: String
 
  primaryOrganization: String
  organizations: [OrganizationMember] @connection(keyName: "orgMemberByUser", fields: ["id"])
  
  owns: [Group] @connection(name: "OwnerUser", keyField: "owner")
  groups: [GroupMember] @connection(name: "UserMembers", keyField: "userID")
  messages: [Message] @connection(name: "UserMessages", keyField: "userId", sortField: "when")
  directMessages: [DirectMessage] @connection(keyName: "dmsByUser", fields: ["id"])
  messageReplies: [Reply] @connection(keyName: "repliesByUser", fields: ["id"])
  
  coachingTriad:[CourseTriadCoaches] @connection(name:"courseCoachTriad",keyField: "userID")
  userTriad:[CourseTriadUsers] @connection(name:"courseUserTriad",keyField: "userID")

  courseInstructing: [CourseInstructors] @connection(name:"courseInstructorsUser",keyField: "userID")
  courseBackOfficeStaff: [CourseBackOfficeStaff] @connection(name:"courseBackOfficeStaffUser",keyField: "userID")
  payments: [Payment] @connection(name:"paymentUser",keyField: "userID")

  alertConfig:AlertConfig
}
type AlertConfig{
 
  emailDirectMessage:String
  emailGroupMessage:String
  emailEventMessage:String
  emailOrgMessage:String
  emailResourceMessage:String
  emailCourseMessage:String
  emailPromotions:String
  
}
type LatLong {
  latitude: String
  longitude: String
  geocodeFull: String
  geocodeCity: String
  geocodeRegion: String
  randomLatitude:String
  randomLongitude:String
}
type Image {
  userId: String
  filenameSmall: String
  filenameMedium: String
  filenameLarge: String
  filenameUpload: String
}
type GroupMember
  @model(queries: null)
  @key(
    name: "byGroup"
    fields: ["groupID", "userID"]
    queryField: "groupMemberByGroup"
  )
  @key(
    name: "byUser"
    fields: ["userID", "groupID"]
    queryField: "groupMemberByUser"
  ) {
  id: ID!
  groupID: ID
  userID: ID
  group: Group @connection(name: "GroupMembers", keyField: "groupID")
  user: User @connection(name: "UserMembers", keyField: "userID")
}
type Group
  @model
  @searchable
  @key(name: "byType", fields: ["type", "id"], queryField: "groupByType")
  @key(name:"byOwnerOrg", fields:["ownerOrgID","name"])
  @auth(
    rules: [
      { allow: private, provider:userPools, operations:[read]}
      { allow: owner, ownerField: "owner" }
      { allow: owner, ownerField: "ownerOrgID" }
      { allow: groups, groups: ["verifiedUsers"], operations: [read] }
      { allow: groups, groups: ["admin"]}

    ]
  ) {
  id: ID!
  owner: String!
  ownerOrgID: ID!
  ownerUser: User @connection(name: "OwnerUser", keyField: "owner")
  ownerOrg: Organization @connection(fields:["ownerOrgID"])
  type: String!
  name: String!

  description: String!
  memberCount: Int
  members: [GroupMember] @connection(name: "GroupMembers", keyField: "groupID")
  image: String!
  time: String
  lastUpdated: String
  location: String
  locationLatLong: LatLong
  length: String
  effort: String
  cost: String
  promotionalText:String
  #organizerGroup:[Group]
  #organizerUser:[User]
  #instructors:[User]
  messages: [Message] @connection(name: "RoomMessages", keyField: "roomId", sortField: "when")
  eventType: String
  eventUrl: String
  tz: String
  isSponsored: String
}
type OrganizationMember
  @model(queries: null)
  @key(name: "orgMemberByOrg", fields: ["organizationId", "userId"]) 
  @key(name: "orgMemberByUser", fields: ["userId", "organizationId"]) 
{
  id: ID!
  userRole: String!
  userId: ID!
  organizationId: ID!
  organizationName: String
  user: User! @connection(fields: ["userId"])
  organization: Organization! @connection(fields: ["organizationId"])
}
type Organization
  @model
  @key(name: "byParentOrg", fields: ["parentOrganizationId","id"])
  @auth(
    rules: [
      { allow: private, provider:userPools, operations:[read]}
      { allow: owner, ownerField: "admins" }
      { allow: owner, ownerField: "superAdmin" }
      { allow: groups, groups: ["verifiedUsers"], operations: [read] }
    ]
  ) {
  id: ID!
  orgName: String!
  adminEmail: String @auth(rules: [{ allow: owner, ownerField: "superAdmin" }])
  phone: String @auth(rules: [{ allow: owner, ownerField: "superAdmin" }])
  admins: [String!]!
  superAdmin: String!

  hasPaidState: String
  profileState: String
  address: String @auth(rules: [{ allow: owner, ownerField: "superAdmin" }])
  city: String @auth(rules: [{ allow: owner, ownerField: "superAdmin" }])
  province: String @auth(rules: [{ allow: owner, ownerField: "superAdmin" }])
  postalCode: String @auth(rules: [{ allow: owner, ownerField: "superAdmin" }])
  country: String

  location: LatLong
  profileImage: Image
  aboutMeShort: String
  aboutMeLong: String
  orgType: String
  orgSize: String
  denomination: String
  pplServed: String
  sundayAttendance: String
  numberVolunteers: String
  orgDescription: String
  joined: String

  parentOrganizationId: ID!
  parentOrganization: Organization @connection(fields: ["parentOrganizationId"])
  subOrganizations: [Organization] @connection(keyName: "byParentOrg", fields: ["id"])

  members: [OrganizationMember] @connection(keyName: "orgMemberByOrg", fields: ["id"])
  ownsGroups: [Group] @connection(keyName: "byOwnerOrg", fields: ["id"])
  #messages: [Message] @connection(keyName: "byAuthorOrg", fields: ["id"])
  resource: [ResourceRoot] @connection(keyName: "resourceByOrganization", fields: ["id"])
}


type Payment
  @model
  @key(fields:["id"])
  @key(name: "paymentProduct", fields: ["productID"])
  @key(name: "paymentUser", fields: ["userID"],queryField:"paymentByUser")

 {
   id:ID!
   productID:String
   product:Product @connection(name:"paymentProduct",keyField:"productID")
   userID:String
   user:User @connection(name:"paymentUser",keyField:"userID")
   dateCompleted:String
   paymentType:String
   paymentInfo:String
   
 }
type CourseInfo
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "owner" }
      { allow: groups, groups: ["courseUser"], operations: [read] }
      { allow: groups, groups: ["courseCoach"], operations: [read] }
      { allow: groups, groups: ["courseAdmin"]}
    ]
  ) {
  id: ID!
  designedBy: String
  summary: String
  courseWeeks: [CourseWeek] @connection(name:"courseInfo",keyField: "courseInfoID",sortField:"week")
  subTitle: String
  instructors: [CourseInstructors] @connection(name:"courseInstructorsInfo",keyField: "courseInfoID")
  backOfficeStaff: [CourseBackOfficeStaff] @connection(name:"courseBackOfficeStaffInfo",keyField: "courseInfoID")
  triads: [CourseTriads] @connection(name:"courseTriads",keyField: "courseInfoID")
  introduction: String
  sylabusAttachment:String
  sylabusAttachmentName:String
}
type CourseTriads
@model
@auth(
    rules: [
      { allow: groups, groups: ["courseUser"],operations: [read]}
      { allow: groups, groups: ["courseCoach"], operations: [read] }
      { allow: groups, groups: ["courseAdmin"]}
    ]
  )

{
  id:ID!
  courseInfoID: String
  courseInfo: CourseInfo @connection(name:"courseTriads",keyField:"courseInfoID")

  coaches: [CourseTriadCoaches] @connection(name:"courseTriadCoaches",keyField: "triadID")
  users: [CourseTriadUsers] @connection(name:"courseTriadUsers",keyField: "triadID")
}

type CourseBackOfficeStaff
@model
@auth(
    rules: [
      { allow: groups, groups: ["courseUser"],operations: [read]}
      { allow: groups, groups: ["courseCoach"], operations: [read] }
      { allow: groups, groups: ["courseAdmin"]}
    ]
  )

{
  id:ID!
  courseInfoID: String
  courseInfo: CourseInfo @connection(name:"courseBackOfficeStaffInfo",keyField:"courseInfoID") 
  userID: String
  user: User @connection(name:"courseBackOfficeStaffUser",keyField:"userID") 
}
type CourseInstructors
@model
@auth(
    rules: [
      { allow: groups, groups: ["courseUser"],operations: [read]}
      { allow: groups, groups: ["courseCoach"], operations: [read] }
      { allow: groups, groups: ["courseAdmin"]}
    ]
  )

{
  id:ID!
  courseInfoID: String
  courseInfo: CourseInfo @connection(name:"courseInstructorsInfo",keyField:"courseInfoID") 
  userID: String
  user: User @connection(name:"courseInstructorsUser",keyField:"userID") 
}
type CourseTriadCoaches
@model
@auth(
    rules: [
      { allow: groups, groups: ["courseUser"],operations: [read]}
      { allow: groups, groups: ["courseCoach"], operations: [read] }
      { allow: groups, groups: ["courseAdmin"]}
    ]
  )

{
  id:ID!
  triadID: String
  triad: CourseTriads @connection(name:"courseTriadCoaches",keyField:"triadID") 
  userID: String
  user: User @connection(name:"courseCoachTriad",keyField:"userID") 
}
type CourseTriadUsers
  @key(fields:["id"])
  @key(name: "courseTriadUsers", fields: ["triadID"])
  @key(name: "courseUserTriad", fields: ["userID"],queryField:"courseTriadUserByUser")

@model
@auth(
    rules: [
      { allow: groups, groups: ["courseUser"],operations: [read]}
      { allow: groups, groups: ["courseCoach"], operations: [read] }
      { allow: groups, groups: ["courseAdmin"]}
    ]
  )
{
  id:ID!
  triadID: String
  triad: CourseTriads @connection(name:"courseTriadUsers",keyField:"triadID") 
  userID: String
  user: User @connection(name:"courseUserTriad",keyField:"userID") 

}
type CourseWeek
 @model 
  @auth(
    rules: [
      { allow: owner, ownerField: "owner" }
      { allow: groups, groups: ["courseUser"], operations: [read] }
      { allow: groups, groups: ["courseCoach"], operations: [read] }
      { allow: groups, groups: ["courseAdmin"]}
    ]
  )
{
  id: ID!
  week: String
  date: String
  tz:String
  name: String
  title:String
  leader: String
  courseInfoID: String
  courseInfo: CourseInfo @connection(name:"courseInfo",keyField:"courseInfoID")
  lessons: [CourseLesson] @connection(name:"courseLesson",keyField: "courseWeekID",sortField:"lesson")
}

type CourseLesson 
@model 
 @auth(
    rules: [
      { allow: owner, ownerField: "owner" }
      { allow: groups, groups: ["courseUser"], operations: [read] }
      { allow: groups, groups: ["courseCoach"], operations: [read] }
      { allow: groups, groups: ["courseAdmin"]}
    ]
  )
{
    id: ID!
  lesson:String
  lessonType:String
  name: String
  time: String
  tz:String
  duration:String
  zoomUrl:String
  zoomRecording:String
  courseLessonResponseId:String
  wordCount:String
  description: String
  courseWeekID:String
  courseWeek: CourseWeek @connection(name: "courseLesson", keyField: "courseWeekID")
 
}


type DirectMessageUser
@model
 @key(name: "byMessageRoom", fields: ["userID", "roomID"])
 @key(name: "byUser", fields: ["roomID", "userID"], queryField: "dmUsersByUser")
{
  id:ID!
  userName:String  
  userID:ID!
  user:User @connection(fields:["userID"])
  roomID:ID!
  room:DirectMessageRoom @connection(fields:["roomID"])
}
type DirectMessageRoom
@model
{
  id:ID!
  name:String
  messageUsers:[DirectMessageUser] @connection(keyName: "byUser", fields: ["id"])
  directMessage:[DirectMessage] @connection(keyName: "byMessageUser", fields: ["id"])
  roomType:String
}
type DirectMessage
@model
@key(name: "byMessageUser", fields: ["messageRoomID", "when"], queryField: "directMessagesByRoom")
@key(name: "dmsByUser", fields: ["userId", "when"])
{
  id: ID!
  content: String
    @auth(rules: [
      { allow: owner, ownerField: "userId", operations: [create, update, read] },
      { allow: owner, ownerField: "recipients", operations: [create, update, read] },
    ])
  attachment: String 
    @auth(rules: [
      { allow: owner, ownerField: "userId", operations: [create, update, read] },
      { allow: owner, ownerField: "recipients", operations: [create, update, read] },
    ])
  attachmentName: String
    @auth(rules: [
      { allow: owner, ownerField: "userId", operations: [create, update, read] },
      { allow: owner, ownerField: "recipients", operations: [create, update, read] },
    ])
  when: String!
  recipients: [String]!
  userId: ID!
  author: User @connection(fields: ["userId"])
  messageRoomID:ID!
  messageRoom:DirectMessageRoom @connection(fields:["messageRoomID"])
}

type Message
  @model
  @key(name: "ByRoom", fields: ["roomId", "when"], queryField: "messagesByRoom")
  #@key(name: "byAuthorOrg", fields:["authorOrgId", "when"])
  @auth(
    rules: [
      {allow: owner, ownerField: "owner", operations: [create, update, delete]}
      {allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  content: String!
  when: String!
  attachment: String
  attachmentName: String
  roomId: ID
  userId: ID
#  authorOrgId: ID!
  postingAs: String
  owner: String
  author: User @connection(name: "UserMessages", keyField: "userId")
#  authorOrg: Organization @connection(fields: ["authorOrgId"])
  room: Group @connection(name: "RoomMessages", keyField: "roomId")
  replies: [Reply] @connection(keyName: "repliesByMessage", fields: ["id"])
}

type Reply @model(queries: null)
  @key(name: "repliesByMessage", fields: ["messageId", "when"])
  @key(name: "subRepliesByReply", fields: ["parentReplyId", "when"])
  @key(name: "repliesByUser", fields: ["userId"])
  @auth(rules: [
      { allow: owner, ownerField: "userId", operations: [create, update, delete] },
      { allow: private, operations: [read] }
  ]) {
    id: ID!
    content: String!
    when: String!
    attachment: String
    attachmentName: String
    userId: ID!
    author: User @connection(fields: ["userId"])

    # reply to top-level message
    messageId: ID!
    parentMessage: Message @connection(fields: ["messageId"])

    # replies to reply (recursive definition)
    parentReplyId: ID!
    parentReply: Reply @connection(fields: ["parentReplyId"])
    subReplies: [Reply] @connection(keyName: "subRepliesByReply", fields: ["id"])
  }

type Subscription {
  onCreateMessageByRoomId(roomId: ID!): Message
    @aws_subscribe(mutations: ["createMessage"])
}

type ResourceRoot 
@model 
 @auth(rules: [
   { allow: groups, groups: ["verifiedUsers"], operations: [read] }
     { allow: groups, groups: ["admin"]}
   ])
 @key(name: "resourceByOrganization", fields: ["organizationId","groupId"])
 {
  id: ID!
  type: String
  groupId: String
  organizationId: ID!
  owner:String
  resources: [Resource] @connection(name:"r1",keyField: "resourceID",sortField:"order")
  organization: Organization @connection(fields: ["organizationId"])
  menuItems: [ResourceMenuItem] @connection(name:"r2",keyField: "resourceRootID",sortField:"order")
}
enum ResourceMenuItemType{
  resource
  menuItem
  break
  schedule
  curriculum
  
}
enum UserGroupType{
  verifiedUsers
  admin
  courseAdmin	
  courseCoach	
  courseUser
  friends
  partners
  subscriptionkyearlyyears	
  subscriptionkykids
  subscriptionkyyouth	
  subscriptionValid	
  userpool
}
type ResourceMenuItem
@model 
@auth(rules: [
   {allow: owner, ownerField: "owner", operations: [create, read, update, delete]}
   {allow: groups, groupsField: "groups", operations: [read] }
   { allow: groups, groups: ["admin"]}
  ])
 @key(name: "byResourceRoot", fields: ["resourceRootID"])
{
  id: ID!
  owner:String
  readGroups:[UserGroupType]
  type: ResourceMenuItemType
  menuTitle: String
  order:String
  depth:String
  pageItems:[ResourcePageItem]
  resourceRootID:ID!
  resourceRoot: ResourceRoot! @connection(name:"r2",keyField:"resourceRootID")
}
enum ResourcePageItemType{
  Menu
  Header
  RichText
  List
  Grid
  Column
  Card
}
enum ResourcePageItemStyle{
  MenuTop
  MenuLeft
  Column3070
  Column7030
  Column5050
  CardManual
  CardAuto
  CardLarge
  RichTextH1
  RichTextH2
  RichTextH3
  RichTextH4
  RichTextBody1
  RichTextBody2
  RichTextBody3
  GridManual
  GridAuto
  ListManual
  ListAuto

}
type ResourcePageItem{
  id:ID
  type:ResourcePageItemType
  style:ResourcePageItemStyle
  size:String
  title1:String
  title2:String
  description1:String
  description2:String
  resourceID:String
  seriesID:String
  episodeID:String
  color:String
  image:Image
  url:String
  order:Int
  pageItemsLeft:[ResourcePageItem]
  pageItemsRight:[ResourcePageItem]
}
type Resource 
@model 
@auth(rules: [
   {allow: owner, ownerField: "owner", operations: [create, read, update, delete]}
  { allow: groups, groups: ["verifiedUsers"], operations: [read] }
   { allow: groups, groups: ["admin"]}
  ])
 @key(name: "byResource", fields: ["resourceID"])
{
  id: ID!
  owner:String
  type: String
  order:String
  title: String
  subtitle:String
  image: Image
  description: String
  whoIsThisFor: String
  extendedDescription: String
  details:[ResourceDetail]
  series: [ResourceSeries] @connection(name:"r2",keyField: "seriesID")
  resourceID:ID!
  resourceRoot: ResourceRoot! @connection(name:"r1",keyField:"resourceID")
}

type ResourceSeries 
@model 
@auth(rules: [
     {allow: owner, ownerField: "owner", operations: [create, read, update, delete]}

  { allow: groups, groups: ["verifiedUsers"] , operations: [read]}
   { allow: groups, groups: ["admin"]}
  ])
 @key(name: "byResourceSeries", fields: ["seriesID","title"])
{
  id: ID!
  owner:String
  type: String
  title: String
  order:Int
  description: String
  whoIsThisFor: String
  imageFile:Image
  category: [String]
  status: String
  details:[ResourceDetail]
  episodes: [ResourceEpisode] @connection(name:"r3",keyField: "episodeID")
  seriesID: ID!
  parentResource: Resource! @connection(name:"r2",keyField: "seriesID")
}
enum ResourceDetailType{
  DefaultYoutube
  Image
  Button
  Link
}
type ResourceDetail{
  type:ResourceDetailType
  name:String
  text:String
  value:String
  image:Image
}
type ResourceEpisode 
@model 
@auth(rules: [
     {allow: owner, ownerField: "owner", operations: [create, read, update, delete]}
  { allow: groups, groups: ["verifiedUsers"], operations: [read] }
   { allow: groups, groups: ["admin"]}
  ]) 
 @key(name: "byResourceEpisode", fields: ["episodeID","title"])
 {
  id: ID!
  owner:String
  episodeNumber: Int
  type: String
  title: String
  description: String
  imageFile:Image
  whoIsThisFor: String
  details:[ResourceDetail]
  episodeID:ID!
  parentSeries: ResourceSeries! @connection(name:"r3",keyField: "episodeID")
}

type Product
  @model
  @auth(rules: [
      { allow: groups, groups: ["admin"] }
      { allow: groups, groups: ["verifiedUsers"], operations: [read] }
  ])
  {
    id: ID!
    price: Float
    pricePer:String
    name: String
    description: String
    confirmationMsg: String
    payments: [Payment] @connection(name:"paymentProduct",keyField: "productID")
    isOrgTier:String
    isIndividualTier:String
    marketingDescription:String
    groupsIncluded:[String]
    enabled:String
    isStripe:String
    isPaypal:String
    tiered:[TieredProduct]
  }  


type TieredProduct{
  name:String
  stripePaymentID:String
  stripeIsTiered:String
}




type vodAsset @model (subscriptions: {level: public})
@auth(
  rules: [
    {allow: owner, ownerField: "owner", operations: [create, update, delete, read] },
    {allow: groups, groups:["Admin"], operations: [create, update, delete, read]},
    {allow: private, operations: [read]}
  ]
)
{
  id:ID!
  title:String!
  description:String!

  #DO NOT EDIT
  video:videoObject @connection
} 

#DO NOT EDIT
type videoObject @model
@auth(
  rules: [
    {allow: owner, ownerField: "owner", operations: [create, update, delete, read] },
    {allow: groups, groups:["Admin"], operations: [create, update, delete, read]},
    {allow: private, operations: [read]}
  ]
)
{
  id:ID!
}